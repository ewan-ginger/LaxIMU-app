---
import menus from "../collections/menu.json";
import Logo from "../components/Logo.astro";

interface Props {
	title: string;
}

const { title } = Astro.props;
---

<!-- This is an invisible div with relative position so that it takes up the height of the menu (because menu is absolute/fixed) -->
<div class="relative w-full h-20 opacity-0 pointer-events-none"></div>
<header id="header" class="absolute top-0 z-50 w-full h-20">
  <div
    class="bg-light-primary dark:bg-dark-primary flex items-center justify-between h-full max-w-7xl pl-6 pr-6 mx-auto border-b border-l-0 border-r-0 border-light-secondary dark:border-dark-secondary select-none lg:border-r lg:border-l lg:rounded-b-xl"
  >
    <Logo />
    <div
      id="mobileMenuBackground"
      onclick="closeMobileMenu()"
      class=" fixed inset-0 z-20 hidden w-screen h-screen duration-300 ease-out bg-white/90 dark:bg-neutral-950/90"
    >
    </div>
    <nav
      class="relative z-30 flex flex-row-reverse justify-start text-sm sm:justify-end text-neutral-500 dark:text-neutral-400 sm:flex-row"
    >
      <div
        id="openMenu"
        class="flex flex-col items-end justify-center hiddenw-6 h-6 ml-4 cursor-pointer sm:hidden"
      >
        <svg
          class="w-8 h-8 text-light-contrast dark:text-dark-contrast hover:text-dark-secondary dark:hover:text-dark-tertiary dark:text-neutral-200"
          fill="none"
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          viewBox="0 0 24 24"
          stroke="currentColor"><path d="M4 8h16M4 16h16"></path></svg
        >
      </div>
      <div
        id="closeMenu"
        class="flex flex-col items-end justify-center hidden w-6 h-6 ml-4 -translate-x-1 cursor-pointer sm:hidden"
      >
        <svg
          class="text-light-contrast dark:text-dark-contrast hover:text-dark-secondary dark:hover:text-dark-tertiary absolute w-6 h-6 text-neutral-600 dark:text-neutral-200"
          fill="none"
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          viewBox="0 0 24 24"
          stroke="currentColor"><path d="M6 18L18 6M6 6l12 12"></path></svg
        >
      </div>
      <div
        id="menu"
        class="fixed top-[75px] ease-out duration-300 sm:top-0 w-full left-0 sm:py-0 pt-7 pb-4 dm:mx-0 left-0 z-40 flex-col items-end justify-start hidden w-full h-auto text-sm sm:text-base sm:h-auto sm:relative sm:flex-row sm:flex sm:text-sm sm:w-auto sm:pr-0 sm:pt-0"
      >
        <div
          class="absolute inset-0 top-0 right-0 block w-full h-full px-3 sm:hidden"
        >
          <div
            class=" bg-light-primary dark:bg-dark-primary relative w-full h-full backdrop-blur-sm rounded-xl dark:bg-neutral-950"
          >
          </div>
        </div>
        {
          menus.map((menu) => {
            if (menu.highlighted == true) {
              if (menu.name == title) {
                return (
                    <div class="w-3">

                    </div>
                    <a
                        href={menu.url}
                        class="text-light-contrast dark:text-dark-text-white hover:text-light-contrast dark:hover:text-dark-contrast md:text-dark-text-white bg-transparent hover:bg-transparent from-dark-secondary-gradient-end via-dark-secondary-gradient-via to-dark-secondary md:hover:bg-gradient-to-br md:focus:ring-4 md:focus:outline-none md:focus:ring-blue-300 md:dark:focus:ring-blue-800 h-10 rounded-full relative flex items-center justify-center w-full px-3 py-2 font-medium tracking-wide text-center duration-200 ease-out sm:py-0 sm:mb-0 md:w-auto md:bg-gradient-to-r hover:text-neutral-900 dark:hover:text-white"
                    >
                        {menu.name}
                    </a>
                )
              } else {
                return (
                    <div class="w-3">

                    </div>
                    <a
                        href={menu.url}
                        class="text-dark-text-nav hover:text-light-contrast dark:hover:text-dark-contrast md:text-dark-text-white bg-transparent hover:bg-transparent from-dark-secondary-gradient-end via-dark-secondary-gradient-via to-dark-secondary md:hover:bg-gradient-to-br md:focus:ring-4 md:focus:outline-none md:focus:ring-blue-300 md:dark:focus:ring-blue-800 h-10 rounded-full relative flex items-center justify-center w-full px-3 py-2 font-medium tracking-wide text-center duration-200 ease-out sm:py-0 sm:mb-0 md:w-auto md:bg-gradient-to-r"
                    >
                        {menu.name}
                    </a>
                )
              }
            } else {
              if (menu.name == title) {
                return (
                    <a
                        href={menu.url}
                        class="text-light-contrast dark:text-dark-text-white font-medium relative flex h-10 items-center justify-center w-full px-3 py-2 tracking-wide text-center duration-200 ease-out sm:py-0 sm:mb-0 md:w-auto hover:text-light-text-nav-hover dark:hover:text-dark-text-nav-hover"
                    >
                        {menu.name}
                    </a>
                )
              } else {
                return (
                    <a
                        href={menu.url}
                        class="text-light-text-nav dark:text-dark-text-nav relative flex h-10 items-center justify-center w-full px-3 py-2 font-medium tracking-wide text-center duration-200 ease-out sm:py-0 sm:mb-0 md:w-auto hover:text-light-text-nav-hover dark:hover:text-dark-text-nav-hover"
                    >
                        {menu.name}
                    </a>
                )
              }
            }
          })
        }
      </div>
      <div
        id="theme-toggle"
        class="relative flex items-center pl-6 ml-4 font-medium tracking-wide cursor-pointer text-neutral-800 group dark:text-white"
      >
        <div
          class="absolute left-0 flex items-center justify-center w-6 h-6 overflow-hidden border-b border-transparent horizon group-hover:border-neutral-600"
        >
          <svg
            class="text-light-contrast dark:text-dark-contrast dark:hover:text-dark-tertiary absolute hidden w-6 h-6 transition duration-700 transform ease transform: translate3d(0, 10px, 0)"
            id="sun"
            fill="none"
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            viewBox="0 0 24 24"
            stroke="currentColor"
            ><path
              d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"
            ></path></svg
          >
          <svg
            class="text-light-contrast dark:text-dark-contrast hover:text-dark-secondary absolute hidden w-6 h-6 transition duration-700 transform ease"
            id="moon"
            fill="none"
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            viewBox="0 0 24 24"
            stroke="currentColor"
            ><path
              d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"
            ></path></svg
          >
        </div>
      </div>
    </nav>
  </div>
</header>

<script>
  var themeToggleDarkIcon = document.getElementById('moon');
  var themeToggleLightIcon = document.getElementById('sun');

  // Change the icons inside the button based on previous settings
  if (localStorage.getItem('color-theme') === 'dark' || (!('color-theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
      themeToggleLightIcon.classList.remove('hidden');
  } else {
      themeToggleDarkIcon.classList.remove('hidden');
  }

  var themeToggleBtn = document.getElementById('theme-toggle');

  themeToggleBtn.addEventListener('click', function() {

      // toggle icons inside button
      themeToggleDarkIcon.classList.toggle('hidden');
      themeToggleLightIcon.classList.toggle('hidden');

      // if set via local storage previously
      if (localStorage.getItem('color-theme')) {
          if (localStorage.getItem('color-theme') === 'light') {
              document.documentElement.classList.add('dark');
              localStorage.setItem('color-theme', 'dark');
          } else {
              document.documentElement.classList.remove('dark');
              localStorage.setItem('color-theme', 'light');
          }

      // if NOT set via local storage previously
      } else {
          if (document.documentElement.classList.contains('dark')) {
              document.documentElement.classList.remove('dark');
              localStorage.setItem('color-theme', 'light');
          } else {
              document.documentElement.classList.add('dark');
              localStorage.setItem('color-theme', 'dark');
          }
      }
      
  });

  var openMenuBtn = document.getElementById('openMenu');
  var closeMenuBtn = document.getElementById('closeMenu');

  openMenuBtn.addEventListener('click', function() {

    document.getElementById("openMenu").classList.add("hidden");
    document.getElementById("closeMenu").classList.remove("hidden");
    document.getElementById("menu").classList.remove("hidden");
    document.getElementById("mobileMenuBackground").classList.add("opacity-0");
    document.getElementById("mobileMenuBackground").classList.remove("hidden");

    setTimeout(() => {
      document
        .getElementById("mobileMenuBackground")
        .classList.remove("opacity-0");
    }, 1);
  });

  closeMenuBtn.addEventListener('click', function() {
    document.getElementById("closeMenu").classList.add("hidden");
    document.getElementById("openMenu").classList.remove("hidden");
    document.getElementById("menu").classList.add("hidden");
    document.getElementById("mobileMenuBackground").classList.add("hidden");
  });

</script>
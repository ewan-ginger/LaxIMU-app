---
import BaseLayout from '../layouts/BaseLayout.astro';
---


<BaseLayout title="Connect Device">
    <div class="grid gap-32 grid-cols-1 lg:grid-cols-3">
        <div class="w-full">
          <div class="w-96 border dark:border-text-nav rounded-3xl p-8 relative flex flex-col items-center">
            <!-- Connection Status in Top-Right -->
            <div id="connection-status" class="absolute top-4 right-4 py-1 px-2 w-min text-xs rounded-full text-center text-white font-medium bg-red-500">
              Disconnected
            </div>
            
            <!-- Centered Components -->
            <img src="/assets/Seeed_Xiao.png" width="150" class="mt-8 mb-4 dark:invert">
            <h1 class="text-2xl font-bold dark:text-white mb-2">
              Seeed Xiao nRF52840
            </h1>
            <h2 class="opacity-70 text-center dark:text-text-nav">
              This is the device's microcontroller which we connect to over Web Bluetooth.
            </h2>
            <button id="connect" class="w-min mt-4 text-black dark:text-white hover:text-black dark:hover:text-white bg-transparent sm:text-white sm:hover:text-white sm:bg-gradient-to-bl hover:bg-transparent from-blue-light via-blue-medium to-blue-dark sm:hover:bg-gradient-to-br sm:focus:ring-4 sm:focus:outline-none sm:focus:ring-blue-300 sm:dark:focus:ring-blue-800 h-10 rounded-full flex items-center justify-center px-4 py-2 font-medium tracking-wide text-center duration-200 ease-out">
              Connect
            </button>
          </div>
      
        </div>
        <div class="w-full border-l dark:border-text-nav px-16 col-span-2">
          <div class="border rounded-3xl py-10 px-16 dark:border-text-nav">
            <h1 class="text-3xl font-medium mb-8 dark:text-white">
              Send Commands to the Device
            </h1>
            <h2 class="mb-4 dark:text-text-nav">
              About to jump into a game or training? Hit start recording so you don't miss out on all the analytics!
            </h2>
            <button id="start" class="inactive-button w-min mb-10 text-black dark:text-white hover:text-black dark:hover:text-white bg-transparent sm:text-white sm:hover:text-white sm:bg-gradient-to-bl hover:bg-transparent from-blue-light via-blue-medium to-blue-dark sm:hover:bg-gradient-to-br sm:focus:ring-4 sm:focus:outline-none sm:focus:ring-blue-300 sm:dark:focus:ring-blue-800 h-10 rounded-full relative flex items-center justify-center w-full px-3 py-2 font-medium tracking-wide text-center duration-200 ease-out sm:py-0  md:w-auto" disabled>Start Recording</button>
            <h2 class="mb-4 dark:text-text-nav">
              Just finished up? Make sure to hit stop recording!
            </h2>
            <button id="stop" class="inactive-button w-min text-black dark:text-white hover:text-black dark:hover:text-white bg-transparent sm:text-white sm:hover:text-white sm:bg-gradient-to-bl hover:bg-transparent from-blue-light via-blue-medium to-blue-dark sm:hover:bg-gradient-to-br sm:focus:ring-4 sm:focus:outline-none sm:focus:ring-blue-300 sm:dark:focus:ring-blue-800 h-10 rounded-full relative flex items-center justify-center w-full px-3 py-2 font-medium tracking-wide text-center duration-200 ease-out sm:py-0 sm:mb-0 md:w-auto" disabled>Stop Recording</button>
          </div>
        </div>
    </div>


    <style>
        /* Inactive button style */
        .inactive-button {
            opacity: 0.5; /* Make button appear faded */
            cursor: not-allowed; /* Change cursor to indicate non-clickable */
        }

        /* Active button style */
        .active-button {
            opacity: 1; /* Fully visible */
            cursor: pointer; /* Default clickable cursor */
        }
    </style>

<script>
  let commandCharacteristic;
let dataCharacteristic;
let isConnected = false;
let device;

const connectButton = document.getElementById('connect');
const statusBox = document.getElementById('connection-status');
const startRecordingButton = document.getElementById('on');
const stopRecordingButton = document.getElementById('off');

// Supabase configuration
const SUPABASE_URL = 'https://vdtyihdwrofvlfkaevgt.supabase.co';

const supabase = createClient(SUPABASE_URL);

const updateStatusBox = (connected) => {
  if (connected) {
    statusBox.textContent = 'Connected';
    statusBox.style.backgroundColor = '#62CE8D';

    startRecordingButton.disabled = false;
    stopRecordingButton.disabled = false;
    startRecordingButton.classList.remove('inactive-button');
    startRecordingButton.classList.add('active-button');
    stopRecordingButton.classList.remove('inactive-button');
    stopRecordingButton.classList.add('active-button');
  } else {
    statusBox.textContent = 'Disconnected';
    statusBox.style.backgroundColor = '#CE6862';

    startRecordingButton.disabled = true;
    stopRecordingButton.disabled = true;
    startRecordingButton.classList.remove('active-button');
    startRecordingButton.classList.add('inactive-button');
    stopRecordingButton.classList.remove('active-button');
    stopRecordingButton.classList.add('inactive-button');
  }
};

updateStatusBox(false);

connectButton.addEventListener('click', async () => {
  if (!isConnected) {
    try {
      device = await navigator.bluetooth.requestDevice({
        filters: [{ services: ['19b10000-e8f2-537e-4f6c-d104768a1214'] }]
      });

      const server = await device.gatt.connect();
      const service = await server.getPrimaryService('19b10000-e8f2-537e-4f6c-d104768a1214');

      commandCharacteristic = await service.getCharacteristic('19b10001-e8f2-537e-4f6c-d104768a1214');
      dataCharacteristic = await service.getCharacteristic('19b10002-e8f2-537e-4f6c-d104768a1214');

      isConnected = true;
      connectButton.textContent = 'Disconnect';
      updateStatusBox(true);
    } catch (error) {
      console.error('Error during connection:', error);
    }
  } else {
    try {
      if (device && device.gatt.connected) {
        await device.gatt.disconnect();
      }
      isConnected = false;
      connectButton.textContent = 'Connect';
      updateStatusBox(false);
    } catch (error) {
      console.error('Error during disconnection:', error);
    }
  }
});

startRecordingButton.addEventListener('click', async () => {
  if (commandCharacteristic) {
    try {
      await commandCharacteristic.writeValue(new TextEncoder().encode('start'));
      console.log('Recording started');
    } catch (error) {
      console.error('Error starting recording:', error);
    }
  }
});

stopRecordingButton.addEventListener('click', async () => {
  if (commandCharacteristic && dataCharacteristic) {
    try {
      await commandCharacteristic.writeValue(new TextEncoder().encode('stop'));
      console.log('Recording stopped. Requesting data...');

      const gameScore = prompt('Enter the game score:');
      if (gameScore === null) {
        console.log('No game score entered.');
        return;
      }

      const receivedData = [];
      let chunk;
      do {
        chunk = await dataCharacteristic.readValue();
        const chunkData = new TextDecoder().decode(chunk);
        receivedData.push(chunkData);
      } while (chunk.byteLength > 0);

      const fullData = receivedData.join('');

      // Upload to Supabase
      const { data, error } = await supabase.from('imu_data').insert([
        {
          game_score: gameScore,
          data: fullData,
          timestamp: new Date().toISOString(),
        },
      ]);

      if (error) {
        console.error('Error uploading to Supabase:', error);
      } else {
        console.log('Data successfully uploaded to Supabase:', data);
      }

      // Send email notification
      const emailResponse = await supabase.rpc('send_email', {
        recipient: 'recipient@example.com', // Replace with your recipient email
        subject: 'New IMU Data Recorded',
        message: `A new IMU recording was uploaded with the following details:\n\nGame Score: ${gameScore}\nTimestamp: ${new Date().toISOString()}`,
      });

      if (emailResponse.error) {
        console.error('Error sending email:', emailResponse.error);
      } else {
        console.log('Email notification sent successfully');
      }

      // Save as CSV
      const blob = new Blob([fullData], { type: 'text/csv' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = 'imu_data.csv';
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);

      console.log('Data received and saved as imu_data.csv');
    } catch (error) {
      console.error('Error stopping recording or fetching data:', error);
    }
  }
});


</script>

</BaseLayout>



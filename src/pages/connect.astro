---
import BaseLayout from '../layouts/BaseLayout.astro';
---


<BaseLayout title="Connect Device">
    <div class="grid gap-32 grid-cols-1 lg:grid-cols-3">
        <div class="w-full">
          <div class="w-96 border dark:border-text-nav rounded-3xl p-8 relative flex flex-col items-center">
            <!-- Connection Status in Top-Right -->
            <div id="connection-status" class="absolute top-4 right-4 py-1 px-2 w-min text-xs rounded-full text-center text-white font-medium bg-red-500">
              Disconnected
            </div>
            
            <!-- Centered Components -->
            <img src="/assets/Seeed_Xiao.png" width="150" class="mt-8 mb-4 dark:invert">
            <h1 class="text-2xl font-bold dark:text-white mb-2">
              Seeed Xiao nRF52840
            </h1>
            <h2 class="opacity-70 text-center dark:text-text-nav">
              This is the device's microcontroller which we connect to over Web Bluetooth.
            </h2>
            <button id="connect" class="w-min mt-4 text-black dark:text-white hover:text-black dark:hover:text-white bg-transparent sm:text-white sm:hover:text-white sm:bg-gradient-to-bl hover:bg-transparent from-blue-light via-blue-medium to-blue-dark sm:hover:bg-gradient-to-br sm:focus:ring-4 sm:focus:outline-none sm:focus:ring-blue-300 sm:dark:focus:ring-blue-800 h-10 rounded-full flex items-center justify-center px-4 py-2 font-medium tracking-wide text-center duration-200 ease-out">
              Connect
            </button>
          </div>
      
        </div>
        <div class="w-full border-l dark:border-text-nav px-16 col-span-2">
          <div class="border rounded-3xl py-10 px-16 dark:border-text-nav">
            <h1 class="text-3xl font-medium mb-8 dark:text-white">
              Send Commands to the Device
            </h1>
            <h2 class="mb-4 dark:text-text-nav">
              About to jump into a game or training? Hit start recording so you don't miss out on all the analytics!
            </h2>
            <button id="on" class="inactive-button w-min mb-10 text-black dark:text-white hover:text-black dark:hover:text-white bg-transparent sm:text-white sm:hover:text-white sm:bg-gradient-to-bl hover:bg-transparent from-blue-light via-blue-medium to-blue-dark sm:hover:bg-gradient-to-br sm:focus:ring-4 sm:focus:outline-none sm:focus:ring-blue-300 sm:dark:focus:ring-blue-800 h-10 rounded-full relative flex items-center justify-center w-full px-3 py-2 font-medium tracking-wide text-center duration-200 ease-out sm:py-0  md:w-auto" disabled>Start Recording</button>
            <h2 class="mb-4 dark:text-text-nav">
              Just finished up? Make sure to hit stop recording!
            </h2>
            <button id="off" class="inactive-button w-min text-black dark:text-white hover:text-black dark:hover:text-white bg-transparent sm:text-white sm:hover:text-white sm:bg-gradient-to-bl hover:bg-transparent from-blue-light via-blue-medium to-blue-dark sm:hover:bg-gradient-to-br sm:focus:ring-4 sm:focus:outline-none sm:focus:ring-blue-300 sm:dark:focus:ring-blue-800 h-10 rounded-full relative flex items-center justify-center w-full px-3 py-2 font-medium tracking-wide text-center duration-200 ease-out sm:py-0 sm:mb-0 md:w-auto" disabled>Stop Recording</button>
          </div>
        </div>
    </div>


    <style>
        /* Inactive button style */
        .inactive-button {
            opacity: 0.5; /* Make button appear faded */
            cursor: not-allowed; /* Change cursor to indicate non-clickable */
        }

        /* Active button style */
        .active-button {
            opacity: 1; /* Fully visible */
            cursor: pointer; /* Default clickable cursor */
        }
    </style>

    <script>
        let ledCharacteristic;
        let isConnected = false; // Flag to track connection state
        let device; // Store the Bluetooth device instance

        const connectButton = document.getElementById('connect');
        const statusBox = document.getElementById('connection-status');
        const turnOnButton = document.getElementById('on');
        const turnOffButton = document.getElementById('off');

        const updateStatusBox = (connected) => {
          if (connected) {
            statusBox.textContent = 'Connected';
            statusBox.style.backgroundColor = '#62CE8D';

            // Enable and style buttons
            turnOnButton.disabled = false;
            turnOffButton.disabled = false;
            turnOnButton.classList.remove('inactive-button');
            turnOnButton.classList.add('active-button');
            turnOffButton.classList.remove('inactive-button');
            turnOffButton.classList.add('active-button');
          } else {
            statusBox.textContent = 'Disconnected';
            statusBox.style.backgroundColor = '#CE6862';

            // Disable and style buttons
            turnOnButton.disabled = true;
            turnOffButton.disabled = true;
            turnOnButton.classList.remove('active-button');
            turnOnButton.classList.add('inactive-button');
            turnOffButton.classList.remove('active-button');
            turnOffButton.classList.add('inactive-button');
          }
        };

        // Initialize status box and buttons to "Disconnected" state
        updateStatusBox(false);

        connectButton.addEventListener('click', async () => {
          if (!isConnected) {
            try {
              console.log('Requesting Bluetooth device...');
              device = await navigator.bluetooth.requestDevice({
                filters: [{ services: ['19b10000-e8f2-537e-4f6c-d104768a1214'] }]
              });

              console.log('Device selected:', device.name);

              const server = await device.gatt.connect();
              console.log('Connected to GATT server');

              const service = await server.getPrimaryService('19b10000-e8f2-537e-4f6c-d104768a1214');
              console.log('Service discovered');

              ledCharacteristic = await service.getCharacteristic('19b10001-e8f2-537e-4f6c-d104768a1214');
              console.log('Characteristic discovered');

              console.log('Connected to device');

              // Update button text, state, and status box
              isConnected = true;
              connectButton.textContent = 'Disconnect';
              updateStatusBox(true);
            } catch (error) {
              console.error('Error during connection:', error);
            }
          } else {
            try {
              console.log('Disconnecting from device...');
              if (device && device.gatt.connected) {
                await device.gatt.disconnect();
                console.log('Device disconnected');
              }

              // Update button text, state, and status box
              isConnected = false;
              connectButton.textContent = 'Connect';
              updateStatusBox(false);
            } catch (error) {
              console.error('Error during disconnection:', error);
            }
          }
        });

        document.getElementById('on').addEventListener('click', async () => {
          if (ledCharacteristic) {
            try {
              console.log('Writing value to turn LED ON');
              await ledCharacteristic.writeValue(Uint8Array.of(1));
              console.log('LED turned on');
            } catch (error) {
              console.error('Error turning on LED:', error);
            }
          } else {
            console.log('LED characteristic not available');
          }
        });

        document.getElementById('off').addEventListener('click', async () => {
          if (ledCharacteristic) {
            try {
              console.log('Writing value to turn LED OFF');
              await ledCharacteristic.writeValue(Uint8Array.of(0));
              console.log('LED turned off');
            } catch (error) {
              console.error('Error turning off LED:', error);
            }
          } else {
            console.log('LED characteristic not available');
          }
        });
    </script>
</BaseLayout>


